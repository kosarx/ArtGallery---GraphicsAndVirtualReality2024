#version 330 core

in vec4 vertex_position_cameraspace;
in vec4 vertex_normal_cameraspace;
in vec4 light_position_cameraspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace;
in vec3 tangent;
in vec3 bitangent;
           

uniform sampler2D shadowMapSampler;
uniform sampler2D diffuseSampler;
uniform sampler2D emissiveSampler;//specularColorSampler;
uniform sampler2D roughnessSampler;

uniform sampler2D Tex1Sampler; //portalTexture
uniform sampler2D normalSampler; //normal map texture of the portal
uniform sampler2D Tex2Sampler; //depth component of the portal

uniform int useTexture = 0;
uniform int usePortalTexture = 0;
uniform int useNormalMaps = 0;
uniform int useParallaxMapping = 0;

// light properties
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
};
uniform Light light;

// materials
struct Material {
    vec4 Ka; 
    vec4 Kd;
    vec4 Ks;
    vec4 Ke;
    float Ns; 
};
uniform Material mtl;

//===== 
uniform float width; // consider textureSize?
uniform float height;

//==== KUWAHARA FILTER
uniform int kuwa;
//==== POINTILISM EFFECT
uniform int pointilism;
//==== COMIC BOOK EFFECT
uniform int comic;
uniform int halftoneOption = 4;
// Colour options for mixing
const vec3 COL1 = vec3(0.12, 0.12, 0.8);
const vec3 COL2 = vec3(0.64, 0.8, 0.12);

// Edge smoothing
const float SMOOTHING = 12.0;

const vec3 GREY_WEIGHTS = vec3(0.299f, 0.587f, 0.114f);
//=== CRT EFFECT
uniform int crt;
uniform float time;
//=========================


out vec4 fragmentColor;


vec4 phong(float visibility, vec4 normal);
float ShadowCalculation(vec4 fragPositionLightspace);
//=========================
float rand(float start, float end);
vec4 applyKuwaharaFiltering();
vec4 applySketchEffect();
vec4 applyHalftone(int option);
vec4 applyPointilismEffect();
vec4 applyHarshEdging();
float calculateCircleDistance(vec2 pos, float radius);
float overlay(float a, float b);
vec3 makeOverlay(vec3 a, vec3 b);
vec3 makeScreenBlend(vec3 a, vec3 b);
vec3 adjustContrast(vec3 color, float contrast);
vec3 boostSaturation(vec3 color, float saturation);
vec4 applyComicBookEffect();
vec2 curveRemapUV(vec2 uv);
vec4 vignetteIntensity(vec2 uv, vec2 resolution, float opacity, float roundness);
vec4 scanLineIntensity(float uv, float resolution, float opacity);
vec4 applyFlickeringEffect();
vec4 applyCRTEffect();
vec4 applyCheapDistortion();
vec4 applyChromaticAberration(vec2 uv, float amount);
//=========================
vec2 parallaxMapping(vec2 texCoords, vec3 viewDir);

// Function to linearize depth value
float LinearizeDepth(float depth) {
    //return depth; // debug skip

    float near = 1.0; // Near plane distance
    float far = 200.0; // Far plane distance
    return (2.0 * near) / (far + near - depth * (far - near));
}

void main() {   
    vec4 color = vec4(0.0, 0.0, 0.0, 0.0);
    if (usePortalTexture == 1){
        // Apply post-processing effects first
        if (kuwa == 1) {
            color = applyKuwaharaFiltering();
        } else if (pointilism == 1) {
            color = applyPointilismEffect();
            fragmentColor = color; // No further processing needed
            return;
        } else if (crt == 1) {
            color = applyCRTEffect();
        } else if (comic == 1) {
            color = applyComicBookEffect();
        }

        vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // Flip the texture horizontally, since the portal is a mirror
        
        if (useParallaxMapping == 1) {
        /*
            // Occlusion ??
            vec3 viewDir = normalize(-vertex_position_cameraspace.xyz);
            float height_scale = 0.07;
            const float minLayers = 8.0;
            const float maxLayers = 64.0;
            float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));
            float layerDepth = 1.0 / numLayers;
            float currentLayerDepth = 0.0;

            // Remove the z division for less aberrated results
            vec2 S = viewDir.xy / viewDir.z * height_scale;
            //vec2 S = viewDir.xy * height_scale;
            vec2 deltaUV = S / numLayers;

            // Sample the depth map and linearize the depth value
            float depthValue = texture(Tex2Sampler, uv).r;
            float linearDepthValue = LinearizeDepth(depthValue);
            float currentDepthMapValue = 1.0f - linearDepthValue;

            // Loop till the point on the heightmap is reached
            while (currentLayerDepth < currentDepthMapValue) {
                uv -= deltaUV;
                depthValue = texture(Tex2Sampler, uv).r;
                linearDepthValue = LinearizeDepth(depthValue);
                currentDepthMapValue = 1.0f - linearDepthValue;
                currentLayerDepth += layerDepth;
            }

            // apply Occlusion (interpolation with prev value)
            vec2 prev = uv + deltaUV;
            depthValue = texture(Tex2Sampler, prev).r;
            linearDepthValue = LinearizeDepth(depthValue);
            float afterDepth = currentDepthMapValue - currentLayerDepth;
            float beforeDepth = 1.0f - linearDepthValue - currentLayerDepth + layerDepth;
            float weight = afterDepth / (afterDepth - beforeDepth);
            uv = prev * weight + uv * (1.0 - weight);

            // Get rid of anything outside the normal range
            if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
                discard;
            }
            */
                vec3 viewDir = normalize(-vertex_position_cameraspace.xyz);
                float height_scale = 0.07;
                const float minLayers = 8.0;
                const float maxLayers = 64.0;
    
                // Calculate the number of layers based on the view angle
                float numLayers = mix(maxLayers, minLayers, abs(dot(vec3(0.0, 0.0, 1.0), viewDir)));
                float layerDepth = 1.0 / numLayers;
    
                // Parallax UV adjustment
                vec2 P = viewDir.xy * height_scale; // Calculate the parallax direction
                vec2 deltaUV = P / numLayers; // Step size for each layer
                float currentLayerDepth = 0.0;
    
                // Fetch initial depth value from the heightmap
                float currentDepthMapValue = texture(Tex2Sampler, uv).r;
    
                // Parallax depth stepping loop
                while (currentLayerDepth < currentDepthMapValue) {
                    uv -= deltaUV;
                    currentDepthMapValue = texture(Tex2Sampler, uv).r;
                    currentLayerDepth += layerDepth;
                }

                // Perform bilinear interpolation between previous and current UV steps for smoother results
                vec2 prevUV = uv + deltaUV;
                float prevDepthMapValue = texture(Tex2Sampler, prevUV).r;
    
                // Calculate the interpolation factor
                float afterDepth = currentDepthMapValue - currentLayerDepth;
                float beforeDepth = prevDepthMapValue - (currentLayerDepth - layerDepth);
                float weight = afterDepth / (afterDepth - beforeDepth);
    
                // Interpolate UVs to improve accuracy
                uv = prevUV * weight + uv * (1.0 - weight);
    
                // Ensure the UV coordinates are within the valid range
                //uv = clamp(uv, vec2(0.0), vec2(1.0));
    
                // Optionally discard pixels if outside the range
                if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) {
                    discard;
                }
        }
        
        vec4 finalColor;
        // Determine the base color
        vec3 baseColor;
        if (color.a == 0.0) {
            baseColor = texture(Tex1Sampler, uv).rgb;
        } else {
            baseColor = color.rgb;
        }

        if (useNormalMaps == 1) {
            vec3 normalSampling = normalize(texture(normalSampler, uv).rgb * 2.0 - 1.0);
            vec3 normal_3 = normalize(tangent * normalSampling.x + bitangent * normalSampling.y + vertex_normal_cameraspace.xyz * normalSampling.z);
            vec4 normal = vec4(normal_3, 1.0);

            float dimming = 0.9;

            // Calculate ambient lighting
            vec3 ambient = light.La.rgb * baseColor * dimming; // Dim the base color

            // Calculate diffuse lighting
            vec3 lightDir = normalize(light.lightPosition_worldspace - vertex_position_cameraspace.xyz);
            float diff = max(dot(normal.xyz, lightDir), 0.0);
            vec3 diffuse = light.Ld.rgb * (diff * baseColor);

            // Calculate specular lighting
            vec3 viewDir = normalize(-vertex_position_cameraspace.xyz);
            vec3 reflectDir = reflect(-lightDir, normal.xyz);
            float cosAlpha = clamp(dot(viewDir, reflectDir), 0.0, 1.0);
            float spec = pow(cosAlpha, 4.0); // Shininess factor
            vec3 specular = light.Ls.rgb * spec * 0.5;

            // Combine the pre-baked texture with the Phong lighting
            vec3 finalColor_3 = ambient + diffuse + specular;

            // self-shadowing
            //float shadow = clamp(dot(normal_3, lightDir), 0.0, 1.0);
            //finalColor_3 *= shadow;
            
            finalColor = vec4(finalColor_3, 1.0);
        } else {
            finalColor = vec4(baseColor, 1.0);
        }

        fragmentColor = finalColor;
        return;
    }

    else {
        //float shadow = ShadowCalculation(vertex_position_lightspace); 

        //float visibility = 1.0f - shadow;
        float visibility = 1.0f;

        fragmentColor = phong(visibility, vertex_normal_cameraspace);
        
    }
}



float ShadowCalculation(vec4 fragPositionLightspace) {
    /*
    // Given the position of a fragment in lightspace coordinates
    // We sample the depth buffer to see whether or not the fragment is shadowed
    
    float shadow;

    // Task 4.3

    // Perspective devide to bring coordinates in range[-1, 1]
    vec3 projCoords = fragPositionLightspace.xyz / fragPositionLightspace.w;

    // Since the depth map values are in range[0, 1]
    projCoords = 0.5 * projCoords + 0.5;

    // Sampling the closest point in this position from the depth map
    // REMINDER: Since we are in lightspace coordinates,
    //           the z parameter is the depth from the camera
    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;

    // Then we get the depth of the current vertex
    float currentDepth = projCoords.z;

    // If the currentDepth is larger than the closestDepth, the fragment is shadowed
    shadow = currentDepth > closestDepth ? 1.0 : 0.0;


    // Task 4.4
    // Correcting the quantization problem
    float bias = 0.005;
    shadow = currentDepth - bias > closestDepth ? 1.0 : 0.0;
        

    // Task 4.6 Make the shadow edges more realistic

    shadow = 0.0;
    vec2 depthMap_dimensions = textureSize(shadowMapSampler, 0);
    vec2 texelSize = 1.0 / depthMap_dimensions;
    for(int x = -1; x <= 1; x++ ){
        for(int y = -1; y <= 1; y++ ){
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;



    // Task 4.5

    if(projCoords.z > 1)
        shadow = 0.0;



    return shadow;*/

    // Given the position of a fragment in lightspace coordinates
    // We sample the depth buffer to see whether or not the fragment is shadowed

    // Perspective divide to bring coordinates in range [-1, 1]
    vec3 projCoords = fragPositionLightspace.xyz / fragPositionLightspace.w;

    // Since the depth map values are in range [0, 1]
    projCoords = 0.5 * projCoords + 0.5;

    // Sampling the closest point in this position from the depth map
    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;

    // Then we get the depth of the current vertex
    float currentDepth = projCoords.z;

    // Calculate bias based on the angle between the normal and the light direction
    vec3 normal = normalize(vertex_normal_cameraspace.xyz);
    vec3 lightDir = normalize(light_position_cameraspace.xyz - vertex_position_cameraspace.xyz);
    float bias = max(0.005 * (1.0 - dot(normal, lightDir)), 0.0005);

    // PCSS filtering
    float shadow = 0.0;
    vec2 texelSize = 1.0 / textureSize(shadowMapSampler, 0);
    float filterRadius = 1.0; // Adjust this value for softer or harder shadows

    // Blocker search
    float avgBlockerDepth = 0.0;
    int numBlockers = 0;
    for (int x = -1; x <= 1; ++x) {
        for (int y = -1; y <= 1; ++y) {
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
            if (pcfDepth < currentDepth - bias) {
                avgBlockerDepth += pcfDepth;
                numBlockers++;
            }
        }
    }
    if (numBlockers > 0) {
        avgBlockerDepth /= numBlockers;
    } else {
        avgBlockerDepth = currentDepth;
    }

    // Penumbra size
    float penumbraSize = (currentDepth - avgBlockerDepth) / avgBlockerDepth;

    // PCF with variable filter radius
    for (int x = -1; x <= 1; ++x) {
        for (int y = -1; y <= 1; ++y) {
            float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize * penumbraSize).r;
            shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;
        }
    }
    shadow /= 9.0;

    // If the fragment is outside the light's frustum, it is not shadowed
    if (projCoords.z > 1.0) {
        shadow = 0.0;
    }

    return shadow;
}


vec4 phong(float visibility, vec4 normal) {
   
    vec4 _Ks = mtl.Ks;
    vec4 _Kd = mtl.Kd;
    vec4 _Ka = mtl.Ka;
    float _Ns = mtl.Ns;
    
    vec4 roughness = vec4(0);
    vec4 emissiveColor = vec4(0);
    //roughness = vec4(texture(roughnessSampler, vertex_UV).rgb, 1.0);
    //emissionColor = vec4(texture(emissionSampler, vertex_UV).rgb, 1.0);
    // use texture for materials
    if (useTexture == 1) {
        roughness = vec4(texture(roughnessSampler, vertex_UV).rgb, 1.0);
        _Ks = 1/(500*roughness+0.01);
        _Kd = vec4(texture(diffuseSampler, vertex_UV).rgb, 1.0);
        _Ka = vec4(0.05 * _Kd.rgb, _Kd.a);
        _Ns = 10;

        emissiveColor = vec4(texture(emissiveSampler, vertex_UV).rgb, 1.0);
    }


    // model ambient intensity (Ia)
    vec4 Ia = light.La * _Ka;

    // model diffuse intensity (Id)
    vec4 N = normalize(normal); 
    vec4 L = normalize(light_position_cameraspace - vertex_position_cameraspace);
    float cosTheta = clamp(dot(N, L), 0, 1);
    vec4 Id = light.Ld * _Kd * cosTheta;

    // model specular intensity (Is)
    vec4 R = reflect(-L, N);
    vec4 E = normalize(-vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = light.Ls * _Ks * specular_factor;

    // here we would normally model the light attenuation effect
    // but since this is a directional light source that is infinitely far away
    // attenuating the light intensity does not make sense
    // let's include it anyway for completeness
    /* /
    float distanceVar = length(light.lightPosition_worldspace - vertex_position_cameraspace.xyz);
    float attenuation = 1.0 / (1.0 + 0.05 * distanceVar + 0.007 * pow(distanceVar, 2));
    Ia *= attenuation;
    Id *= attenuation;
    Is *= attenuation;
     */

    // final fragment color
    /*
    fragmentColor = vec4(
        Ia + 
        Id * visibility +   // Task 4.3 Use visibility
        Is * visibility);*/
    //visibility = 1; // Disable shadows
    fragmentColor = vec4(Ia + Id*visibility + Is*visibility + emissiveColor);

    return fragmentColor;
}


//===================================== KUWAHARA =====================================
vec4 applyKuwaharaFiltering(){
    vec4 frag_colour;

    const int radius = 12;
    vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror
    vec2 src_size = vec2(width, height);
    float inv_n = 1.0 / float((radius + 1) * (radius + 1));

    vec3 m[4] = vec3[](vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));
    vec3 s[4] = vec3[](vec3(0.0), vec3(0.0), vec3(0.0), vec3(0.0));

    for (int j = -radius; j <= radius; ++j) {
        for (int i = -radius; i <= radius; ++i) {
            vec2 offset = vec2(i, j) / src_size;
            vec3 c = texture(Tex1Sampler, uv + offset).rgb;

            if (i <= 0 && j <= 0) {
                m[0] += c;
                s[0] += c * c;
            }
            if (i >= 0 && j <= 0) {
                m[1] += c;
                s[1] += c * c;
            }
            if (i >= 0 && j >= 0) {
                m[2] += c;
                s[2] += c * c;
            }
            if (i <= 0 && j >= 0) {
                m[3] += c;
                s[3] += c * c;
            }
        }
    }

    float min_sigma2 = 1e+2;
    for (int k = 0; k < 4; ++k) {
        m[k] *= inv_n;
        s[k] = abs(s[k] * inv_n - m[k] * m[k]);

        float sigma2 = s[k].r + s[k].g + s[k].b;
        if (sigma2 < min_sigma2) {
            min_sigma2 = sigma2;
            frag_colour = vec4(m[k], 1.0);
        }
    }

    //fragmentColor = frag_colour;
    return frag_colour;
}
//===================================== POINTILISM ===================================
vec4 applyPointilismEffect() {
    vec4 frag_colour;
    
    vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror

    vec3 originalColor = texture(Tex1Sampler, uv).rgb;
    // if we've ended up in a dot, make the fragment black
    if (originalColor == vec3(0.0, 0.0, 0.0)) {
		frag_colour = vec4(0.0, 0.0, 0.0, 1.0);
        //fragmentColor = frag_colour;
		return frag_colour;
	}
    // else, ...
    //luminance = 0.299 * red + 0.587 * green + 0.114 * blue
    float brightness = 0.299 * originalColor.r + 0.587 * originalColor.g + 0.114 * originalColor.b;
    vec3 fadedColor = originalColor;
    if (brightness > 0.1) {
		fadedColor = vec3(1.0, 1.0, 1.0);
	}   

    // apply the halftone effect
    vec4 halftoneColor = applyHalftone(5);

    // mix the halftone effect with the faded out image
    frag_colour = vec4(mix(fadedColor, halftoneColor.rgb, 0.08), 1.0);

    //fragmentColor = frag_colour;
    return frag_colour;
        
}

//===================================== COMIC BOOK EFFECT ============================
vec4 applyHarshEdging(){
	vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror
	vec2 src_size = vec2(width, height);
	float n = 0.0;
	vec3 m = vec3(0.0);
	vec3 s = vec3(0.0);

	for (int j = -5; j <= 5; ++j)  {
		for (int i = -5; i <= 5; ++i)  {
			vec3 c = texture(Tex1Sampler, uv + vec2(i,j) / src_size).rgb;
			m += c;
			s += c * c;
			n++;
		}
	}

	m /= n;
	s = abs(s / n - m * m);

	float sigma = s.r + s.g + s.b;
    
    vec4 color;
	if (sigma > 0.04) {
		color = vec4(0.0, 0.0, 0.0, 1.0);
	} else {
		color = vec4(1.0, 1.0, 1.0, 0.0);
	}
    return color;
}

vec4 applySketchEffect(){
    const vec3 W = vec3(0.2126, 0.7152, 0.0722); // Luminance

    vec2 textureCoordinate = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror


    vec3 textureColor = texture(Tex1Sampler, textureCoordinate).rgb;

    vec2 stp0 = vec2(1.0 / width, 0.0);
    vec2 st0p = vec2(0.0, 1.0 / height);
    vec2 stpp = vec2(1.0 / width, 1.0 / height);
    vec2 stpm = vec2(1.0 / width, -1.0 / height);

    float i00   = dot( textureColor, W);
    float im1m1 = dot( texture(Tex1Sampler, textureCoordinate - stpp).rgb, W);
    float ip1p1 = dot( texture(Tex1Sampler, textureCoordinate + stpp).rgb, W);
    float im1p1 = dot( texture(Tex1Sampler, textureCoordinate - stpm).rgb, W);
    float ip1m1 = dot( texture(Tex1Sampler, textureCoordinate + stpm).rgb, W);
    float im10 = dot( texture(Tex1Sampler, textureCoordinate - stp0).rgb, W);
    float ip10 = dot( texture(Tex1Sampler, textureCoordinate + stp0).rgb, W);
    float i0m1 = dot( texture(Tex1Sampler, textureCoordinate - st0p).rgb, W);
    float i0p1 = dot( texture(Tex1Sampler, textureCoordinate + st0p).rgb, W);
    float h = -im1p1 - 2.0 * i0p1 - ip1p1 + im1m1 + 2.0 * i0m1 + ip1m1; // -1 0 1 horizontal gradient of Sobel filter
    float v = -im1m1 - 2.0 * im10 - im1p1 + ip1m1 + 2.0 * ip10 + ip1p1; // -1 0 1 vertical gradient of Sobel filter

    // Increase intensity of edges
    float factor = 5.0f;
    h = h * factor;
    v = v * factor;

    float mag = 1.0 - length(vec2(h, v));
    vec3 target = vec3(mag);

    vec4 color = vec4(mix(textureColor, target, 0.5), 1.0);
    return color;
}


float calculateCircleDistance(vec2 pos, float radius) {
    return length(pos) - radius;
}

float overlay(float a, float b) {
	if(a < 0.5f) return 2.0f * a * b;
	return 1.0f - 2.0f * (1.0f - a) * (1.0f - b);
}

vec3 makeOverlay(vec3 a, vec3 b) {
	float red = overlay(a.r, b.r);
	float green = overlay(a.g, b.g);
	float blue = overlay(a.b, b.b);
	return vec3(red, green, blue);
}

vec3 makeScreenBlend(vec3 a, vec3 b) {
	return 1.0f - (1.0f - a) * (1.0f - b);
}

vec4 applyHalftone(int option) {
    vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror

    vec2 resolution = vec2(width, height);
    
    // aspect ratio
    float w = 1.0/ min(resolution.x, resolution.y);
    vec2 aspectRatio = resolution * w;
    
    // texture coordinates -- uv from 0 to 1 and new uv
    vec2 halftone_uv = uv * aspectRatio; // fix the texture coordinates so that they aren't elliptical in shape

    // Circle total
    float total = min(resolution.x, resolution.y)/ 4.0;
    vec2 pos = fract(halftone_uv * total);
    pos -= 0.5;

    // Greyscale
    // current pixel colour
    vec4 pixel = texture(Tex1Sampler, uv);

    // convert to grayscale
    float greyResult = dot(pixel.rgb, GREY_WEIGHTS);

    // Circle distance 
    // use the inverse of the grayscale brightness to define the radius of each circle
    float radius = 1.0 - greyResult;
    float c = calculateCircleDistance(pos, radius);

    // Smoothing  
    float s = SMOOTHING * w;
    c = 1.0 - smoothstep(s, -s, c);

    vec4 color;

    // Pixel alpha
    color.a = pixel.a;
    

    switch(option){
        case 0:
			// Multiply
            color.rgb = pixel.rgb * c;
			break;
		case 1:
			// Black and white multiply
            color.rgb = vec3(greyResult * c);
			break;
		case 2:
            // Overlay
            color.rgb = makeOverlay(pixel.rgb, vec3(c));
			break;
		case 3:
            // Black and white overlay
            color.rgb = makeOverlay(vec3(greyResult), vec3(c));
			break;
        case 4:
            // Screen blend
            color.rgb = makeScreenBlend(pixel.rgb, vec3(c));
            break;
        case 5:
            // Black and white screen blend
            color.rgb = makeScreenBlend(vec3(greyResult), vec3(c));
            break;
        case 6:
            // Circles
            color.rgb = vec3(c);
            break;
        case 7:
            // Mix
            color.rgb = mix(COL1, COL2, c);
            break;
		default:
			// Default behavior
			color.rgb; // do nothing
			break;
	}
    return color;
}

vec3 adjustContrast(vec3 color, float contrast) {
    // Adjust contrast by shifting the color towards or away from 0.5
    return ((color - 0.5) * max(contrast, 0.0)) + 0.5;
}

vec3 boostSaturation(vec3 color, float saturation) {
    // boost saturation by mixing the grey version of the color with the original color
    float grey = dot(color, vec3(0.299, 0.587, 0.114));
    return mix(vec3(grey), color, saturation);
}

vec4 applyComicBookEffect() {
    //int option = 4;
    vec4 halfToneResult = applyHalftone(halftoneOption);
    vec4 sketchResult = applySketchEffect();
    vec4 harshEdgingResult = applyHarshEdging();
    
    // mixing the results
    vec4 halfToneAndSketch= mix(halfToneResult, sketchResult, 0.5);
    if (harshEdgingResult.a > 0.0) {
		halfToneAndSketch =  mix(halfToneAndSketch, harshEdgingResult, 0.6);
	}

    // Adjust contrast and boost saturation
    float contrast = 1.5f; // 1.0f to 2.0f, increasing results in clearer edges
    float saturation = 1.5f; // 10f to 2.0f, increasing results in more vivid colors
    vec3 adjustedColor = adjustContrast(halfToneAndSketch.rgb, contrast);
    adjustedColor = boostSaturation(adjustedColor, saturation);
    
    vec4 frag_colour = vec4(adjustedColor, halfToneAndSketch.a);
    //fragmentColor = frag_colour;
    return frag_colour;
}

//========================= CRT EFFECT ============================================
float rand(float start, float end) {
	return start + (end - start) * fract(sin(dot(gl_FragCoord.xy, vec2(12.9898, 78.233))) * 43758.5453);
}

vec2 curveRemapUV(vec2 uv) {    
    // as we near the edge of our screen apply greater distortion using a sinusoid.
    vec2 curvature = vec2(3.0, 3.0); // increase the curvature for more distortion in the portal from 3.0, 3.0

    uv = uv * 2.0 - 1.0;
	vec2 offset = abs(uv.yx) / vec2(curvature.x, curvature.y);
	uv = uv + uv * offset * offset;
	uv = uv * 0.5 + 0.5;
    return uv;
}

vec4 vignetteIntensity(vec2 uv, vec2 resolution, float opacity, float roundness) {
    float intensity = uv.x * uv.y * (1.0 - uv.x) * (1.0 - uv.y);
    return vec4(vec3(clamp(pow((resolution.x / roundness) * intensity, opacity), 0.0, 1.0)), 1.0);
}

#define PI 3.14159265359
vec4 scanLineIntensity(float uv, float resolution, float opacity) {
    float intensity = sin(uv * resolution * PI * 2.0);
    intensity = ((0.5 * intensity) + 0.5) * 0.9 + 0.1;
    return vec4(vec3(pow(intensity, opacity)), 1.0);
}

vec4 applyCheapDistortion(){
    vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror
    vec4 frag_colour;

    // Get texture dimensions using textureSize
    vec2 textureSize = vec2(textureSize(Tex1Sampler, 0));
    float rt_w = textureSize.x;
    float rt_h = textureSize.y;

    // Vary pixel size based on UV coordinates
    float pixel_w = 20.0 + 5.0 * sin(uv.x * 10.0);
    float pixel_h = 20.0 + 5.0 * cos(uv.y * 10.0);
    
    float dx = pixel_w * (1.0 / rt_w);
    float dy = pixel_h * (1.0 / rt_h);
    
    vec2 coord = vec2(dx * floor(uv.x / dx), dy * floor(uv.y / dy));
    
    vec3 tc = texture(Tex1Sampler, coord).rgb;
    
    // Add a tint to the color
    //vec3 tint = vec3(0.8, 0.6, 1.0);
    //vec3 tintedColor = tc * tint;
    
    //frag_colour = vec4(tintedColor, 1.0);
    frag_colour = vec4(tc, 1.0);
    return frag_colour;
}

vec4 applyChromaticAberration(vec2 uv, float aberrationAmount) {
    // Sample the texture at slightly offset UV coordinates for each color channel
    vec2 redUV = uv + vec2(aberrationAmount, 0.0);
    vec2 greenUV = uv;
    vec2 blueUV = uv - vec2(aberrationAmount, 0.0);

    // Sample the texture for each color channel
    vec3 red = texture(Tex1Sampler, redUV).rgb;
    vec3 green = texture(Tex1Sampler, greenUV).rgb;
    vec3 blue = texture(Tex1Sampler, blueUV).rgb;

    // Combine the color channels
    vec3 color = vec3(red.r, green.g, blue.b);

    return vec4(color, 1.0);
}

// Horizontal lines effect
vec4 horizontal_lines(vec2 uv, float time) {
    if (uv.y < cos(time * 3.0) + 0.05 && uv.y > cos(time * 3.0) && fract(time * 0.4) > -0.01 && uv.x < cos(time * 3.0) + 1.0 && uv.x > cos(time * 3.0) - 1.0) {
        vec2 distort_uv = uv + vec2(0.0, sin(time * 3.0) * 2.0);
        return texture(Tex1Sampler, distort_uv);
    }
    return texture(Tex1Sampler, uv);
}

// Vertical lines effect
vec4 vertical_lines(vec2 uv, float time) {
    if (uv.x < cos(time * 2.0) + 0.04 && uv.x > cos(time * 2.0) && fract(time * 0.05) > 0.5) {
        return vec4(0.0, 0.0, 0.0, 1.0);
    }
    return texture(Tex1Sampler, uv);
}

vec4 applyFlickeringEffect() {

    vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror
    
    float random_choice = rand(0.0, 1.0);

    // Introduce a time-based condition to control the effect's appearance
    float interval = mod(time, 5.0); // Change 5.0 to adjust the interval duration

    if (interval < 2.5) { // Effect is active for half of the interval
        if (random_choice < 0.5) {
            return horizontal_lines(uv, time);
        } else {
            return vertical_lines(uv, time);
        }
    } else {
        // Return the original texture when the effect is inactive
        return texture(Tex1Sampler, uv);
    }
    /*
    // Shift small blocks
    float x_sup = rand(0.0, 1.0);
    float x_inf = x_sup - 0.2;
    float y_sup = rand(0.0, 1.0);
    float y_inf = y_sup - 0.2;

    if (uv.x < x_sup && uv.x > x_inf && uv.y < y_sup && uv.y > y_inf && rand(0.0, 1.0) < 0.8) {
        vec4 new_texture = texture(Tex1Sampler, uv + vec2(rand(0.0, 0.5), rand(0.0, 0.5)));
        return new_texture;
    }
    return texture(Tex1Sampler, uv);*/
}

vec4 applyCRTEffect() {
    vec2 uv = vec2(1.0 - vertex_UV.x, vertex_UV.y); // flip the texture horizontally, since the portal is a mirror

    vec2 remappedUV = curveRemapUV(vec2(uv.x, uv.y));
    // no need to do anything if the UV is out of bounds
    if (remappedUV.x < 0.0 || remappedUV.y < 0.0 || remappedUV.x > 1.0 || remappedUV.y > 1.0){
        vec4 frag_colour = vec4(0.0, 0.0, 0.0, 1.0);
        return frag_colour;
    } 
    vec4 baseColor = texture(Tex1Sampler, remappedUV);

    vec2 screenResolution = vec2(width, height);
    float vignetteOpacity = 1.0; // for how much the vignette should be visible
    float vignetteRoundness = 2.0;  // increase for the portal from 2.0

    baseColor *= vignetteIntensity(remappedUV, screenResolution, vignetteOpacity, vignetteRoundness);

    vec2 scanLineOpacity = vec2(1, 1);
    baseColor *= scanLineIntensity(remappedUV.x, screenResolution.y, scanLineOpacity.x);
    baseColor *= scanLineIntensity(remappedUV.y, screenResolution.x, scanLineOpacity.y);

    // boost the colors after all the darkening effects
    float brightness = 4.0f;
    baseColor *= vec4(vec3(brightness), 1.0);

    // get the input from the distortion
    vec4 distortedColor = applyCheapDistortion();
    // get the chromatic aberration 
    float aberrationAmount = 0.1; //increase aberration for portal from 0.01;
    vec4 chromaticAberration = applyChromaticAberration(remappedUV, aberrationAmount);
    // get the screen flickering
    vec4 flickeringColor = applyFlickeringEffect();

    // mix the chromatic aberration with the distorted color
    distortedColor = mix(distortedColor, chromaticAberration, 0.3);
    // mix the flickering color with the distorted color
    distortedColor = mix(distortedColor, flickeringColor, 0.2);
    vec4 finalColor = mix(baseColor, distortedColor, 0.7);
    
    //fragmentColor = finalColor;
    return finalColor;
	
}

//========================= PARALLAX MAPPING =======================================
vec2 parallaxMapping(vec2 texCoords, vec3 viewDir) {
    float heightScale = 0.1; // Adjust this value to control the depth effect
    float height = texture(Tex2Sampler, texCoords).r;
    vec2 p = viewDir.xy / viewDir.z * (height * heightScale);
    return texCoords - p;
}