#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 vertexTangent_modelspace;
layout(location = 4) in vec3 vertexBitangent_modelspace;

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;


out vec3 vertex_position_worldspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;

out vec3 tangent;
out vec3 bitangent;

out mat3 TBN;

void main() {

    // Output position of the vertex
    gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
    
    // FS
    vertex_position_worldspace = (M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_position_cameraspace = (V * M * vec4(vertexPosition_modelspace, 1)).xyz;
    vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz;
    vertex_UV = vertexUV;

    //for normal mapping
    /* *///
    vec3 T = normalize(vec3(M * vec4(1.0,0.0,0.0,0.0))); 
    vec3 B = normalize(vec3(M * vec4(0.0,1.0,0.0,0.0)));

    vec3 N = normalize(mat3(transpose(inverse(M))) * vertexNormal_modelspace);

    T = normalize(T - dot(T,N)*N);
    B = normalize(B - dot(B,N)*N - dot(B, T) * T);

    tangent = normalize(mat3(V)*T);
    bitangent = normalize(mat3(V)*B); //*/

    // Create a TBN matrix from the tangent, bitangent and normal vectors
    /* ///
    vec3 T = normalize(vec3(M * vec4(vertexTangent_modelspace, 0.0)));
    vec3 B = normalize(vec3(M * vec4(vertexBitangent_modelspace, 0.0)));
    vec3 N = normalize(vec3(M * vec4(vertexNormal_modelspace, 0.0)));
    TBN = transpose(mat3(T, B, N));*/

    /* ///
    vec3 T = normalize(vec3(M * vec4(vertexTangent_modelspace, 0.0)));
    vec3 N = normalize(vec3(M * vec4(vertexNormal_modelspace, 0.0)));
    // Re-orthogonalize T with respect to N
    T = normalize(T - dot(T, N) * N);
    vec3 B = cross(N, T);
    TBN = mat3(T, B, N);//*/

    /* *///
    // Transform the normal, tangent, and bitangent to camera space (view space)
    vec3 T_cameraspace = normalize(( M * vec4(vertexTangent_modelspace, 0)).xyz);
    //vec3 B_cameraspace = normalize((V * M * vec4(vertexBitangent_modelspace, 0)).xyz);
    vec3 N_cameraspace = vertex_normal_cameraspace;
    // re-orthogonalize T with respect to N
    T = normalize(T_cameraspace - dot(T_cameraspace, N_cameraspace) * N_cameraspace);

    vec3 B_cameraspace = cross(N_cameraspace, T_cameraspace);

    // Create the TBN matrix
    TBN = transpose(mat3(T_cameraspace, B_cameraspace, N_cameraspace)); //*/
}