#version 330
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

out vec2 uv;
out vec3 vertex_normal_cameraspace;
out vec3 tangent;
out vec3 bitangent;

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

void main() {
	uv = vertexUV;
    
    vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz;
	
    gl_Position = P * V * M * vec4(vertexPosition, 1.0);

    //for normal mapping
    /* *///
    vec3 T = normalize(vec3(M * vec4(1.0,0.0,0.0,0.0))); 
    vec3 B = normalize(vec3(M * vec4(0.0,1.0,0.0,0.0)));
    //*/

    vec3 N = normalize(mat3(transpose(inverse(M))) * vertexNormal_modelspace);

    T = normalize(T - dot(T,N)*N);
    B = normalize(B - dot(B,N)*N - dot(B, T) * T);

    tangent = normalize(mat3(V)*T);
    bitangent = normalize(mat3(V)*B); //*/
}


/*#version 330
layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;

out vec4 vertex_position_cameraspace;
out vec4 vertex_normal_cameraspace;
//out vec4 light_position_cameraspace;
out vec2 vertex_UV;
//out vec4 vertex_position_lightspace;

void main() {

    // Output position of the vertex
    gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
    
    // FS
    vertex_position_cameraspace = V * M * vec4(vertexPosition_modelspace, 1);
    vertex_normal_cameraspace = V * M * vec4(vertexNormal_modelspace, 0);
    //light_position_cameraspace = V * vec4(light.lightPosition_worldspace, 1);
    vertex_UV = vertexUV;

    // Task 4.2
    //vertex_position_lightspace = lightVP * M * vec4(vertexPosition_modelspace, 1);
}*/