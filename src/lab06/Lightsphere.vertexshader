#version 330

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;

// light properties
#define NR_POINT_LIGHTS 4
struct Light {
    vec4 La;
    vec4 Ld;
    vec4 Ls;
    vec3 lightPosition_worldspace;
    float power;
    float kc;
    float kl;
    float kq;
};
uniform Light light[NR_POINT_LIGHTS];

uniform mat4 P;
uniform mat4 V;
uniform mat4 M;
uniform mat4 lightVP;

out vec4 vertex_position_cameraspace;
out vec4 vertex_normal_cameraspace;
//out vec4 light_position_cameraspace;
//out vec4 vertex_position_lightspace;

void main() {
    // Output position of the vertex
    gl_Position =  P * V * M * vec4(vertexPosition_modelspace, 1);
    
    // FS
    vertex_position_cameraspace = V * M * vec4(vertexPosition_modelspace, 1);
    vertex_normal_cameraspace = V * M * vec4(vertexNormal_modelspace, 0);
    //light_position_cameraspace = V * vec4(light.lightPosition_worldspace, 1);

}

